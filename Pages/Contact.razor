@page "/contact"
@using System.ComponentModel.DataAnnotations
@inject HttpClient Http

<PageTitle>Contact Us</PageTitle>
<div class="contact-container">
    <h1>Contact Us</h1>

    <EditForm Model="@contactModel" OnValidSubmit="HandleValidSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="name">Name:</label>
            <InputText id="name" class="form-control" @bind-Value="contactModel.Name" />
            <ValidationMessage For="@(() => contactModel.Name)" />
        </div>

        <div class="form-group">
            <label for="email">Email:</label>
            <InputText id="email" type="email" class="form-control" @bind-Value="contactModel.Email" />
            <ValidationMessage For="@(() => contactModel.Email)" />
        </div>

        <div class="form-group">
            <label for="message">Message:</label>
            <InputTextArea id="message" class="form-control" @bind-Value="contactModel.Message" />
            <ValidationMessage For="@(() => contactModel.Message)" />
        </div>

        <button type="submit" class="btn btn-primary">Send</button>
    </EditForm>

    @if (!string.IsNullOrEmpty(resultMessage))
    {
        <div class="alert alert-success mt-3">
            @resultMessage
        </div>
    }
</div>


@code {
    private ContactModel contactModel = new ContactModel();
    private string? resultMessage;

    private async Task HandleValidSubmit()
    {

        string endpointURL = "https://canvelbackend20250219112918-czbtfafjcpf6ftgv.canadacentral-01.azurewebsites.net/api/SendEmail";
        // Simulate sending the contact message
        try
        {
            var response = await Http.PostAsJsonAsync(endpointURL, contactModel);
            if (response.IsSuccessStatusCode)
            {
                resultMessage = "Thank you for your message. We'll get back to you shortly.";
            }
        }
        catch (Exception ex)
        {
            resultMessage = $"An error has ocurred: {ex.Message}";
        }

        // Reset the form
        contactModel = new ContactModel();
    }

    public class ContactModel
    {
        [Required(ErrorMessage = "Please enter your name.")]
        public string Name { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please enter your email.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; } = string.Empty;

        [Required(ErrorMessage = "Please enter a message.")]
        public string Message { get; set; } = string.Empty;
    }
}

